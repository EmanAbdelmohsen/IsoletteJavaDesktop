
package isolette_monitor;

import application.OperatorInterface;
import com.sun.corba.se.impl.util.RepositoryId;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
* The main frame is the Isolette GUI that presents all the required information that the system actor (nurse) needs to know.
* The GUI allows the system actor to configure the Isolette and the Thermostat. 
*/
public class frm_main extends javax.swing.JFrame {

    OperatorInterface OpInterface;
    String error = "";
    /**
     * Creates new form frm_main
     */
    public frm_main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ckbx_power = new javax.swing.JCheckBox();
        chkbx_infantIn = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        spnr_minTempF = new javax.swing.JSpinner();
        spnr_maxTempF = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        lbl_maxTemp = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbl_regStatus = new javax.swing.JLabel();
        lbl_displayedTempF = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lbl_heatControl = new javax.swing.JLabel();
        lbl_minTempC = new javax.swing.JLabel();
        lbl_maxTempC = new javax.swing.JLabel();
        lbl_desiredTempC = new javax.swing.JLabel();
        lbl_displayedTempC = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lbl_MonitorStatus = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        spnr_maxAlarmTempF = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        spnr_minAlarmTempF = new javax.swing.JSpinner();
        lbl_alarm = new javax.swing.JLabel();
        lbl_minAlarmTempC = new javax.swing.JLabel();
        lbl_maxAlarmTempC = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn_setTempRange = new javax.swing.JButton();
        lbl_errorMsg = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        lbl_feltTempF = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbl_TempFeltC = new javax.swing.JLabel();
        lbl_feltTempC = new javax.swing.JLabel();
        lbl_thermostatOp = new javax.swing.JLabel();
        btn_TestEx = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ckbx_power.setText("Isolette Powered");
        ckbx_power.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckbx_powerItemStateChanged(evt);
            }
        });

        chkbx_infantIn.setText("Infant in Isolette");
        chkbx_infantIn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkbx_infantInItemStateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Minimum Desired Temperature (◦F)");

        lbl_maxTemp.setText("Maximum Desired Temperature (◦F)");

        jLabel7.setText("Status:");

        jLabel8.setText("Displayed Temperature:");

        lbl_regStatus.setText("-");

        lbl_displayedTempF.setText("0 ");

        jLabel6.setText("(◦F)");

        jLabel10.setText("Heat Control:");

        lbl_heatControl.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(lbl_maxTemp)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_heatControl)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_displayedTempF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addComponent(lbl_regStatus)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnr_minTempF)
                            .addComponent(spnr_maxTempF)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(lbl_displayedTempC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_desiredTempC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_minTempC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_maxTempC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spnr_minTempF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_minTempC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_maxTemp)
                    .addComponent(spnr_maxTempF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_maxTempC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_desiredTempC)
                    .addComponent(lbl_displayedTempC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lbl_regStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lbl_displayedTempF)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lbl_heatControl))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_MonitorStatus.setText("-");

        jLabel14.setText("Alarm:");

        jLabel12.setText("Maximum Alarm Temperature (◦F)");

        jLabel13.setText("Status:");

        jLabel11.setText("Minimum Alarm Temperature (◦F)");

        lbl_alarm.setText("-");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_MonitorStatus)
                    .addComponent(lbl_alarm)
                    .addComponent(spnr_minAlarmTempF, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(spnr_maxAlarmTempF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_minAlarmTempC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_maxAlarmTempC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(spnr_minAlarmTempF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_minAlarmTempC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(spnr_maxAlarmTempF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_maxAlarmTempC))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lbl_MonitorStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lbl_alarm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Regulator");

        jLabel3.setText("Monitor");

        btn_setTempRange.setText("Configure");
        btn_setTempRange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_setTempRangeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_errorMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_setTempRange))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_setTempRange)
                    .addComponent(lbl_errorMsg))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Isolette System");

        jLabel1.setText("Nurse/Operator");

        jLabel17.setText("Infant");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel18.setText("Temperature Felt:");

        lbl_feltTempF.setText("0 ");

        jLabel9.setText("(◦F)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel18)
                .addGap(97, 97, 97)
                .addComponent(lbl_feltTempF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(lbl_feltTempC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_TempFeltC, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lbl_feltTempF)
                    .addComponent(jLabel9)
                    .addComponent(lbl_TempFeltC)
                    .addComponent(lbl_feltTempC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_TestEx.setText("Test Exception Case");
        btn_TestEx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_TestExMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckbx_power)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(lbl_thermostatOp))
                    .addComponent(chkbx_infantIn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17)
                            .addComponent(jLabel1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_TestEx)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_thermostatOp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckbx_power)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkbx_infantIn)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_TestEx)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ckbx_powerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckbx_powerItemStateChanged
        error = "";
        lbl_errorMsg.setText(error);
        
        if(evt.getStateChange() == 1)
        {
            OpInterface = new OperatorInterface();      //initialized readings  
            
            System.out.println("Status of the Temp Regulator: " + OpInterface.GetRegulatorState());
            System.out.println("Status of the Temp Monitor: " + OpInterface.GetMonitorState());
            System.out.println("Alarm: " + OpInterface.GetAlarmState());
                
            ExecuteInitialRounds();
        }      
        
        //Isolette is powered off
        else 
        {
            //can't turn off if there is an infant
            if(chkbx_infantIn.isSelected())
            {
                error = "Cannot turn Isolette off when the infant is in.";
                lbl_errorMsg.setText(error);
                lbl_errorMsg.setForeground(Color.red);
                System.out.println("Error: " + error);  
                
                ckbx_power.setSelected(false);
                return;
            }
            
            SetTheNonState();
        }           
    }//GEN-LAST:event_ckbx_powerItemStateChanged

    /*
    * Save the DisredTemperatureRange
    */
    private void btn_setTempRangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_setTempRangeMouseClicked
        error = "";
        lbl_errorMsg.setText(error);
        
        if(!ckbx_power.isSelected())
        {
            error = "Please Power on the Isolette";
            lbl_errorMsg.setText(error);
            lbl_errorMsg.setForeground(Color.red);
            System.out.println("Error: " + error);   
            return;
        }
        
        int minTemp = (Integer)spnr_minTempF.getValue(); 
        int maxTemp = (Integer)spnr_maxTempF.getValue();
        int minAlarmTemp = (Integer)spnr_minAlarmTempF.getValue();
        int maxAlarmTemp = (Integer)spnr_maxAlarmTempF.getValue();
        
        ExecuteRounds(minTemp, maxTemp, minAlarmTemp, maxAlarmTemp);
    }//GEN-LAST:event_btn_setTempRangeMouseClicked

    private void chkbx_infantInItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkbx_infantInItemStateChanged
        error = "";
        lbl_errorMsg.setText(error);
        
        //can't place infant unless the Isolette is powered
        if(!ckbx_power.isSelected())
        {
            error = "Please Power on the Isolette";
            lbl_errorMsg.setText(error);
            lbl_errorMsg.setForeground(Color.red);
            System.out.println("Error: " + error); 
            chkbx_infantIn.setSelected(false);
            
            return;
        }
        
        lbl_feltTempF.setText(OpInterface.GetDisplayedTemp());
    }//GEN-LAST:event_chkbx_infantInItemStateChanged

    //For testing pupose only - to test the exception case where the current temperature is not within the desired temperature range
    private void btn_TestExMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_TestExMouseClicked
        int minTemp = (Integer)spnr_minTempF.getValue(); 
        int maxTemp = (Integer)spnr_maxTempF.getValue();
        int minAlarmTemp = (Integer)spnr_minAlarmTempF.getValue();
        int maxAlarmTemp = (Integer)spnr_maxAlarmTempF.getValue();
        
        String error = OpInterface.execute_round(minTemp, maxTemp, minAlarmTemp, maxAlarmTemp);
        
        if(error == "")
        {
            int maxIteration = 0;

            if(OpInterface.GetCurrentTemp() > maxTemp)
            {
                maxIteration = (int)OpInterface.GetCurrentTemp() - maxTemp + 1;
            }
            else if (OpInterface.GetCurrentTemp() < minTemp)
            {
                maxIteration = minTemp - (int)OpInterface.GetCurrentTemp() + 1;
            }

            for(int i = 0; i < maxIteration*1800; i++)
            {
                String info = "Please wait while the Isolette is heating..";
                lbl_thermostatOp.setText(info);
                lbl_thermostatOp.setForeground(Color.red);
            
                OpInterface.execute_round(minTemp, maxTemp, minAlarmTemp, maxAlarmTemp);

                //for test purposes
                System.out.println("\n \nRound No. " + i+1);
                System.out.println("Status of the Temp Regulator: " + OpInterface.GetRegulatorState());
                System.out.println("Status of the Temp Monitor: " + OpInterface.GetMonitorState());
                System.out.println("Alarm: " + OpInterface.GetAlarmState());
            }

            PrintReadingsFromThermostat(OpInterface);
            lbl_thermostatOp.setText("");
        }
        
        else
        {
            lbl_errorMsg.setText(error);
            lbl_errorMsg.setForeground(Color.red);
            System.out.println("Error: " + error);   
        }
    }//GEN-LAST:event_btn_TestExMouseClicked
    
    
    /*
    * Executes rounds sequentially
    */
    void ExecuteInitialRounds()
    {
        for(int i = 0; i < 12601; i++)
        {
            String info = "Please wait while the Isolette is heating..";
            lbl_thermostatOp.setText(info);
            lbl_thermostatOp.setForeground(Color.red);
             
            OpInterface.OperateThermostat();
            
            //for test purposes
            System.out.println("Round No. " + i+1);
            System.out.println("Status of the Temp Regulator: " + OpInterface.GetRegulatorState());
            System.out.println("Status of the Temp Monitor: " + OpInterface.GetMonitorState());
            System.out.println("Heat: " + OpInterface.GetHeatControl());
            System.out.println("Alarm: " + OpInterface.GetAlarmState());
        }
                    
        PrintReadingsFromThermostat(OpInterface);
        lbl_thermostatOp.setText("");
    }
    
    void ExecuteRounds(int minTemp, int maxTemp, int minAlarmTemp, int maxAlarmTemp)
    {
        String error = OpInterface.execute_round(minTemp, maxTemp, minAlarmTemp, maxAlarmTemp);
        
        if(error == "")
        {
            int maxIteration = 0;

            if(OpInterface.GetCurrentTemp() > maxTemp)
            {
                maxIteration = (int)OpInterface.GetCurrentTemp() - maxTemp + 1;
            }
            else if (OpInterface.GetCurrentTemp() < minTemp)
            {
                maxIteration = minTemp - (int)OpInterface.GetCurrentTemp() + 1;
            }

            for(int i = 0; i < maxIteration*600; i++)
            {
                String info = "Please wait while the Isolette is heating..";
                lbl_thermostatOp.setText(info);
                lbl_thermostatOp.setForeground(Color.red);
            
                OpInterface.execute_round(minTemp, maxTemp, minAlarmTemp, maxAlarmTemp);

                //for test purposes
                System.out.println("\n \nRound No. " + i+1);
                System.out.println("Status of the Temp Regulator: " + OpInterface.GetRegulatorState());
                System.out.println("Status of the Temp Monitor: " + OpInterface.GetMonitorState());
                System.out.println("Alarm: " + OpInterface.GetAlarmState());
            }

            PrintReadingsFromThermostat(OpInterface);
            lbl_thermostatOp.setText("");
        }
        
        else
        {
            lbl_errorMsg.setText(error);
            lbl_errorMsg.setForeground(Color.red);
            System.out.println("Error: " + error);   
        }
    }
    
    /*
    * The non-state occurs when the Isolette is powered off
    */
    void SetTheNonState()
    {
        lbl_MonitorStatus.setText("-");
        lbl_alarm.setText("-");
        lbl_heatControl.setText("-");
        lbl_regStatus.setText("-");
        lbl_feltTempC.setText("");  
        lbl_displayedTempC.setText("");
        lbl_minTempC.setText("");
        lbl_maxTempC.setText("");
        lbl_minAlarmTempC.setText("");
        lbl_maxAlarmTempC.setText("");

        spnr_minTempF.setValue(0);
        spnr_maxTempF.setValue(0);
        spnr_minAlarmTempF.setValue(0);
        spnr_maxAlarmTempF.setValue(0);
        lbl_displayedTempF.setText(String.valueOf(0));
    }
      
    /*
    * This method sets the GUI controls with the required readings coming from the thermostat
    */
    void PrintReadingsFromThermostat(OperatorInterface opInterface)
    {
        lbl_MonitorStatus.setText(OpInterface.GetMonitorState());
        lbl_alarm.setText(OpInterface.GetAlarmState());
        if(OpInterface.GetAlarmState() == "On") lbl_alarm.setForeground(Color.red);
        lbl_regStatus.setText(OpInterface.GetRegulatorState());
        lbl_heatControl.setText(OpInterface.GetHeatControl());

        spnr_minTempF.setValue(OpInterface.GetMinDesiredTemp());
        spnr_maxTempF.setValue(OpInterface.GetMaxDesiredTemp());
        spnr_minAlarmTempF.setValue(OpInterface.GetMinAlarmTemp());
        spnr_maxAlarmTempF.setValue(OpInterface.GetMaxAlarmTemp());
        lbl_displayedTempF.setText(String.valueOf(OpInterface.GetDisplayedTemp()));
    }
    
    
    
    
    
    
    
      /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_main().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_TestEx;
    private javax.swing.JButton btn_setTempRange;
    private javax.swing.JCheckBox chkbx_infantIn;
    private javax.swing.JCheckBox ckbx_power;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl_MonitorStatus;
    private javax.swing.JLabel lbl_TempFeltC;
    private javax.swing.JLabel lbl_alarm;
    private javax.swing.JLabel lbl_desiredTempC;
    private javax.swing.JLabel lbl_displayedTempC;
    private javax.swing.JLabel lbl_displayedTempF;
    private javax.swing.JLabel lbl_errorMsg;
    private javax.swing.JLabel lbl_feltTempC;
    private javax.swing.JLabel lbl_feltTempF;
    private javax.swing.JLabel lbl_heatControl;
    private javax.swing.JLabel lbl_maxAlarmTempC;
    private javax.swing.JLabel lbl_maxTemp;
    private javax.swing.JLabel lbl_maxTempC;
    private javax.swing.JLabel lbl_minAlarmTempC;
    private javax.swing.JLabel lbl_minTempC;
    private javax.swing.JLabel lbl_regStatus;
    private javax.swing.JLabel lbl_thermostatOp;
    private javax.swing.JSpinner spnr_maxAlarmTempF;
    private javax.swing.JSpinner spnr_maxTempF;
    private javax.swing.JSpinner spnr_minAlarmTempF;
    private javax.swing.JSpinner spnr_minTempF;
    // End of variables declaration//GEN-END:variables
}
